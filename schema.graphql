type AccessibilityInformation {
  description: String
  id: ID
  types: String
  urls: [WebUrl!]
}

input AccessibilityInformationInput {
  description: String
  types: String
  urls: [WebUrlInput!]
}

type Address {
  addition: String
  city: String
  geoLocation: GeoLocation
  id: ID
  kind: String
  street: String
  wasteLocationTypes: [WasteLocationType!]
  zip: String
}

input AddressInput {
  id: Int
  addition: String
  street: String
  zip: String
  city: String
  kind: String
  geoLocation: GeoLocationInput
}

scalar AnyPrimitive

type AppUserContent {
  content: String
  createdAt: String
  dataSource: String
  dataType: String
  id: ID
  updatedAt: String
}

# Autogenerated return type of AssignWasteLocationToTour
type AssignWasteLocationToTourPayload {
  id: ID!
}

enum CategoriesOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  id_DESC
  id_ASC
  name_DESC
  name_ASC
}

type Category {
  children: [Category!]
  eventRecords(location: String): [EventRecord!]
  eventRecordsCount(location: String): Int
  genericItems(location: String): [GenericItem!]
  genericItemsCount(location: String): Int
  id: ID
  name: String
  newsItems: [NewsItem!]
  newsItemsCount: Int
  parent: Category
  pointsOfInterest(location: String): [PointOfInterest!]
  pointsOfInterestCount(location: String): Int
  pointsOfInterestTreeCount(location: String): Int
  tours(location: String): [Tour!]
  toursCount(location: String): Int
  toursTreeCount(location: String): Int
  upcomingEventRecords(location: String): [EventRecord!]
  upcomingEventRecordsCount(location: String): Int
}

input CategoryInput {
  name: String
}

type Certificate {
  id: ID
  name: String
}

input CertificateInput {
  name: String
}

type Contact {
  email: String
  fax: String
  firstName: String
  id: ID
  lastName: String
  phone: String
  webUrls: [WebUrl!]
}

input ContactInput {
  firstName: String
  lastName: String
  phone: String
  fax: String
  webUrls: [WebUrlInput!]
  email: String
}

type ContentBlock {
  body: String
  createdAt: String
  id: ID
  intro: String
  mediaContents: [MediaContent!]
  title: String
  updatedAt: String
}

input ContentBlockInput {
  title: String
  intro: String
  body: String
  mediaContents: [MediaContentInput!]
}

type DataProvider {
  address: Address
  contact: Contact
  dataType: String
  description: String
  id: ID
  logo: WebUrl
  name: String
  notice: String
}

type Date {
  dateEnd: String
  dateStart: String
  id: ID
  timeDescription: String
  timeEnd: String
  timeStart: String
  useOnlyTimeDescription: String
  weekday: String
}

input DateInput {
  weekday: String
  dateStart: String
  dateEnd: String
  timeStart: String
  timeEnd: String
  timeDescription: String
  useOnlyTimeDescription: Boolean
}

type Destroy {
  id: Int
  status: String
  statusCode: Int
}

type EventRecord {
  accessibilityInformation: AccessibilityInformation
  addresses: [Address!]
  categories: [Category!]
  category: Category
  contacts: [Contact!]
  createdAt: String
  dataProvider: DataProvider
  dates: [Date!]
  description: String
  externalId: String
  id: ID
  listDate: String
  location: Location
  mediaContents: [MediaContent!]
  organizer: OperatingCompany
  parentId: Int
  priceInformations: [Price!]
  region: Region
  regionId: String
  repeat: Boolean
  repeatDuration: RepeatDuration
  settings: Setting
  tagList: [String!]
  title: String
  updatedAt: String
  urls: [WebUrl!]
  visible: Boolean
}

enum EventRecordsOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  id_DESC
  id_ASC
  title_DESC
  title_ASC
  listDate_DESC
  listDate_ASC
}

type GenericItem {
  accessibilityInformations: [AccessibilityInformation!]
  addresses: [Address!]
  author: String
  categories: [Category!]
  companies: [OperatingCompany!]
  contacts: [Contact!]
  contentBlocks: [ContentBlock!]
  createdAt: String
  dataProvider: DataProvider
  dates: [Date!]
  externalId: String
  genericItems: [GenericItem!]
  genericType: String
  id: ID
  locations: [Location!]
  mediaContents: [MediaContent!]
  openingHours: [OpeningHour!]
  payload: JSON
  priceInformations: [Price!]
  publicationDate: String
  publishedAt: String
  settings: Setting
  title: String
  updatedAt: String
  visible: Boolean
  webUrls: [WebUrl!]
}

input GenericItemInput {
  forceCreate: Boolean
  pushNotification: Boolean
  author: String
  title: String
  genericType: String
  externalId: String
  publicationDate: String
  publishedAt: String
  categoryName: String
  payload: JSON
  contacts: [ContactInput!]
  genericItems: [GenericItemInput!]
  companies: [OperatingCompanyInput!]
  categories: [CategoryInput!]
  webUrls: [WebUrlInput!]
  addresses: [AddressInput!]
  contentBlocks: [ContentBlockInput!]
  openingHours: [OpeningHourInput!]
  priceInformations: [PriceInput!]
  mediaContents: [MediaContentInput!]
  locations: [LocationInput!]
  dates: [DateInput!]
  accessibilityInformations: [AccessibilityInformationInput!]
}

enum GenericItemOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  publishedAt_DESC
  publishedAt_ASC
  publicationDate_DESC
  publicationDate_ASC
  id_DESC
  id_ASC
}

type GeoLocation {
  id: ID
  latitude: Float
  longitude: Float
}

input GeoLocationInput {
  latitude: AnyPrimitive
  longitude: AnyPrimitive
}

#       A specific JSON type representing I18n
#       text data, for example:
#       ```
#       {
#         de: "deutscher Text",
#         en: "englischer Text"
#       }
#       ```
#
scalar I18nJSON

# Represents untyped JSON
scalar JSON

type Location {
  department: String
  district: String
  geoLocation: GeoLocation
  id: ID
  name: String
  regionName: String
  state: String
}

input LocationInput {
  name: String
  department: String
  district: String
  regionName: String
  state: String
  geoLocation: GeoLocationInput
}

type Lunch {
  createdAt: String
  dates: [Date!]
  id: ID
  listDate: String
  lunchOffers: [LunchOffer!]
  pointOfInterest: PointOfInterest!
  pointOfInterestAttributes: String
  text: String
  updatedAt: String
}

input LunchInput {
  text: String
  dates: [DateInput!]
  lunchOffers: [LunchOfferInput!]
  pointOfInterestId: ID
  pointOfInterestAttributes: String
}

type LunchOffer {
  createdAt: String
  id: ID
  name: String
  price: String
  updatedAt: String
}

input LunchOfferInput {
  name: String
  price: String
}

enum LunchesOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  id_DESC
  id_ASC
}

type MediaContent {
  captionText: String
  contentType: String
  copyright: String
  height: Int
  id: ID
  sourceUrl: WebUrl
  width: Int
}

input MediaContentInput {
  captionText: String
  copyright: String
  height: AnyPrimitive
  width: AnyPrimitive
  contentType: String
  sourceUrl: WebUrlInput
}

type Mutation {
  assignWasteLocationToTour(
    id: ID
    forceCreate: Boolean
    tourId: ID
    tourValue: Boolean
    addressId: ID
  ): AssignWasteLocationToTourPayload!
  changeVisibility(id: ID!, recordType: String!, visible: Boolean!): Status!
  commentSurvey(surveyId: ID!, message: String!): Status!
  createAppUserContent(
    dataSource: String
    dataType: String
    content: String
  ): AppUserContent!
  createEventRecord(
    id: ID
    forceCreate: Boolean
    parentId: Int
    description: String
    externalId: String
    title: String
    dates: [DateInput!]
    repeat: Boolean
    repeatDuration: RepeatDurationInput
    categoryName: String
    categories: [CategoryInput!]
    regionName: String
    region: RegionInput
    addresses: [AddressInput!]
    location: LocationInput
    contacts: [ContactInput!]
    urls: [WebUrlInput!]
    mediaContents: [MediaContentInput!]
    organizer: OperatingCompanyInput
    priceInformations: [PriceInput!]
    accessibilityInformation: AccessibilityInformationInput
    tags: [String!]
  ): EventRecord!
  createGenericItem(
    id: ID
    forceCreate: Boolean
    pushNotification: Boolean
    author: String
    title: String
    genericType: String
    externalId: String
    publicationDate: String
    publishedAt: String
    categoryName: String
    payload: JSON
    contacts: [ContactInput!]
    genericItems: [GenericItemInput!]
    companies: [OperatingCompanyInput!]
    categories: [CategoryInput!]
    webUrls: [WebUrlInput!]
    addresses: [AddressInput!]
    contentBlocks: [ContentBlockInput!]
    openingHours: [OpeningHourInput!]
    priceInformations: [PriceInput!]
    mediaContents: [MediaContentInput!]
    locations: [LocationInput!]
    dates: [DateInput!]
    accessibilityInformations: [AccessibilityInformationInput!]
  ): GenericItem!
  createNewsItem(
    id: ID
    forceCreate: Boolean
    pushNotification: Boolean
    author: String
    title: String
    externalId: String
    fullVersion: Boolean
    charactersToBeShown: Int
    newsType: String
    publicationDate: String
    publishedAt: String
    showPublishDate: Boolean
    categoryName: String
    categories: [CategoryInput!]
    sourceUrl: WebUrlInput
    address: AddressInput
    contentBlocks: [ContentBlockInput!]
  ): NewsItem!
  createOrUpdateStaticContent(
    forceCreate: Boolean
    id: ID
    name: String
    content: String
    dataType: String!
    version: String
  ): PublicHtmlFile!
  createOrUpdateSurveyPoll(
    forceCreate: Boolean
    id: ID
    title: I18nJSON
    description: I18nJSON
    date: DateInput
    questionId: ID
    questionTitle: I18nJSON!
    questionAllowMultipleResponses: I18nJSON
    responseOptions: [JSON!]!
    canComment: Boolean
    isMultilingual: Boolean
  ): SurveyPoll!
  createPointOfInterest(
    id: ID
    forceCreate: Boolean
    name: String!
    description: String
    mobileDescription: String
    active: Boolean
    categoryName: String
    payload: JSON
    categories: [CategoryInput!]
    addresses: [AddressInput!]
    contact: ContactInput
    priceInformations: [PriceInput!]
    openingHours: [OpeningHourInput!]
    operatingCompany: OperatingCompanyInput
    webUrls: [WebUrlInput!]
    mediaContents: [MediaContentInput!]
    location: LocationInput
    certificates: [CertificateInput!]
    accessibilityInformation: AccessibilityInformationInput
    tags: [String!]
    lunches: [LunchInput!]
  ): PointOfInterest!
  createTour(
    id: ID
    forceCreate: Boolean
    name: String!
    description: String
    mobileDescription: String
    active: Boolean
    categoryName: String
    payload: JSON
    categories: [CategoryInput!]
    addresses: [AddressInput!]
    contact: ContactInput
    operatingCompany: OperatingCompanyInput
    webUrls: [WebUrlInput!]
    mediaContents: [MediaContentInput!]
    location: LocationInput
    certificates: [CertificateInput!]
    accessibilityInformation: AccessibilityInformationInput
    lengthKm: Int!
    meansOfTransportation: String
    geometryTourData: [GeoLocationInput!]
    tags: [String!]
    tourStops: [TourStopInput!]
  ): Tour!
  createWasteLocation(
    id: ID
    forceCreate: Boolean
    street: String
    city: String
    zip: String
  ): Address!
  createWastePickUpTime(
    pickupDate: String!
    wasteLocationTypeId: Int
    wasteLocationType: WasteLocationTypeInput
  ): WastePickUpTime!
  createWasteTour(
    id: ID
    forceCreate: Boolean
    title: String
    wasteType: String
  ): WasteTour!
  destroyRecord(id: ID, recordType: String!, externalId: Int): Destroy!
  updateWasteTourDates(
    id: ID!
    year: String!
    dates: [String!]
  ): UpdateWasteTourDatesPayload!

  # `voteForSurvey` is deprecated. Use `votesForSurvey` instead.
  voteForSurvey(increaseId: ID, decreaseId: ID): Status!
    @deprecated(reason: "Use `votesForSurvey` instead.")
  votesForSurvey(increaseId: [ID!], decreaseId: [ID!]): Status!
}

type NewsItem {
  address: Address
  author: String
  categories: [Category!]
  charactersToBeShown: String
  contentBlocks: [ContentBlock!]
  createdAt: String
  dataProvider: DataProvider
  externalId: String
  fullVersion: Boolean
  id: ID
  newsType: String
  publicationDate: String
  publishedAt: String
  pushNotificationsSentAt: String
  settings: Setting
  showPublishDate: Boolean
  sourceUrl: WebUrl
  title: String
  updatedAt: String
  visible: Boolean
}

enum NewsItemsOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  publishedAt_DESC
  publishedAt_ASC
  id_DESC
  id_ASC
}

type OpenWeatherMap {
  alerts: [JSON!]
  createdAt: String
  current: JSON
  daily: [JSON!]
  hourly: [JSON!]
  id: ID
  lat: Float
  lon: Float
  updatedAt: String
}

enum OpenWeatherMapsOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  id_DESC
  id_ASC
}

type OpeningHour {
  dateFrom: String
  dateTo: String
  description: String
  id: ID
  open: Boolean
  sortNumber: Int
  timeFrom: String
  timeTo: String
  weekday: String
}

input OpeningHourInput {
  weekday: String
  dateFrom: String
  dateTo: String
  timeFrom: String
  timeTo: String
  sortNumber: Int
  open: Boolean
  description: String
}

type OperatingCompany {
  address: Address
  contact: Contact
  id: ID
  name: String
}

input OperatingCompanyInput {
  name: String
  address: AddressInput
  contact: ContactInput
}

type PointOfInterest {
  accessibilityInformation: AccessibilityInformation
  active: Boolean
  addresses: [Address!]
  categories: [Category!]
  category: Category
  certificates: [Certificate!]
  contact: Contact
  createdAt: String
  dataProvider: DataProvider
  description: String
  id: ID
  location: Location
  lunches: [Lunch!]
  mediaContents: [MediaContent!]
  mobileDescription: String
  name: String
  openingHours: [OpeningHour!]
  operatingCompany: OperatingCompany
  payload: JSON
  priceInformations: [Price!]
  settings: Setting
  tagList: [String!]
  updatedAt: String
  visible: Boolean
  webUrls: [WebUrl!]
}

enum PointsOfInterestOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  id_DESC
  id_ASC
  name_DESC
  name_ASC
  RAND
}

type Price {
  ageFrom: Int
  ageTo: Int
  amount: Float
  category: String
  description: String
  groupPrice: Boolean
  id: ID
  maxAdultCount: Int
  maxChildrenCount: Int
  minAdultCount: Int
  minChildrenCount: Int
  name: String
}

input PriceInput {
  name: String
  amount: AnyPrimitive
  groupPrice: Boolean
  ageFrom: Int
  ageTo: Int
  minAdultCount: Int
  maxAdultCount: Int
  minChildrenCount: Int
  maxChildrenCount: Int
  description: String
  category: String
}

type PublicHtmlFile {
  content: String
  createdAt: String
  dataType: String
  id: ID
  name: String
  updatedAt: String
  version: String
}

type PublicJsonFile {
  content: JSON!
  createdAt: String
  dataType: String
  id: ID
  name: String!
  updatedAt: String
  version: String
}

type Query {
  categories(
    limit: Int
    skip: Int
    ids: [ID]
    excludeIds: [ID]
    order: CategoriesOrder = name_ASC
  ): [Category!]!
  categoryTree: JSON!
  directus(query: String): JSON!
  eventRecord(id: ID!): EventRecord!
  eventRecords(
    dateRange: [String]
    categoryId: ID
    skip: Int
    limit: Int
    ids: [ID]
    order: EventRecordsOrder = createdAt_DESC
    dataProvider: String
    dataProviderId: ID
    take: Int
    location: String
  ): [EventRecord]
  genericItem(id: ID!): GenericItem!
  genericItems(
    categoryId: ID
    dataProvider: String
    dataProviderId: ID
    externalId: ID
    genericType: String
    ids: [ID]
    limit: Int
    order: GenericItemOrder = createdAt_DESC
    skip: Int
    location: String
  ): [GenericItem]
  lunch(id: ID!): Lunch!
  lunches(
    dateRange: [String]
    limit: Int
    skip: Int
    ids: [ID]
    order: LunchesOrder = createdAt_DESC
  ): [Lunch!]!
  newsItem(id: ID!): NewsItem!
  newsItems(
    limit: Int
    skip: Int
    ids: [ID]
    order: NewsItemsOrder = publishedAt_DESC
    dataProvider: String
    dataProviderId: ID
    excludeDataProviderIds: [ID]
    categoryId: ID
    categoryIds: [ID]
  ): [NewsItem]
  newsItemsDataProviders(categoryId: ID, categoryIds: [ID!]): [DataProvider!]!
  pointOfInterest(id: ID!): PointOfInterest!
  pointsOfInterest(
    limit: Int
    skip: Int
    ids: [ID]
    order: PointsOfInterestOrder = createdAt_DESC
    dataProvider: String
    dataProviderId: ID
    category: String
    categoryId: ID
    categoryIds: [ID]
    location: String
  ): [PointOfInterest]
  publicHtmlFile(name: String!, version: String): PublicHtmlFile!
  publicHtmlFiles: [PublicHtmlFile!]!
  publicJsonFile(name: String!, version: String): PublicJsonFile!
  surveyComments(surveyId: ID): [SurveyComment!]!
  surveys(ids: [ID], ongoing: Boolean, archived: Boolean): [SurveyPoll!]!
  tour(id: ID!): Tour!
  tours(
    limit: Int
    skip: Int
    ids: [ID]
    order: ToursOrder = createdAt_DESC
    dataProvider: String
    dataProviderId: ID
    category: String
    categoryId: ID
    categoryIds: [ID]
    location: String
  ): [Tour!]!
  wasteAddresses(
    limit: Int
    skip: Int
    ids: [ID]
    order: WasteLocationOrder = createdAt_DESC
  ): [Address!]!
  wasteLocationType(id: ID!): WasteLocationType!
  wasteLocationTypes(tourId: ID): [WasteLocationType!]!
  wasteTourDates(tourId: ID!): [WastePickUpTime!]!
  wasteTours: [WasteTour!]!
  weatherMap(id: ID): OpenWeatherMap!
  weatherMaps(
    limit: Int
    skip: Int
    ids: [ID]
    order: OpenWeatherMapsOrder = createdAt_DESC
  ): [OpenWeatherMap]
}

type Region {
  id: ID
  name: String
}

input RegionInput {
  name: String
}

type RepeatDuration {
  endDate: String
  everyYear: Boolean
  id: ID
  startDate: String
}

input RepeatDurationInput {
  startDate: String
  endDate: String
  everyYear: Boolean
}

type Setting {
  alwaysRecreateOnImport: String
  displayOnlySummary: String
  onlySummaryLinkText: String
}

type Status {
  id: ID
  status: String
  statusCode: Int
}

type SurveyComment {
  createdAt: String
  id: ID
  message: String
  surveyPollId: ID
  visible: Boolean
}

type SurveyPoll {
  canComment: Boolean
  createdAt: String
  dataProvider: DataProvider
  date: Date
  description: I18nJSON
  id: ID
  isMultilingual: Boolean
  questionAllowMultipleResponses: Boolean
  questionId: ID
  questionTitle: I18nJSON
  responseOptions: [SurveyResponseOptions!]
  surveyComments: [SurveyComment!]
  title: I18nJSON
  updatedAt: String
  visible: Boolean
}

type SurveyResponseOptions {
  createdAt: String
  id: ID
  title: I18nJSON
  updatedAt: String
  votesCount: Int
}

type Tour {
  active: Boolean
  addresses: [Address!]
  categories: [Category!]
  category: Category
  certificates: [Certificate!]
  contact: Contact
  createdAt: String
  dataProvider: DataProvider
  description: String
  geometryTourData: [GeoLocation!]!
  id: ID
  lengthKm: Int
  location: Location
  meansOfTransportation: String
  mediaContents: [MediaContent!]
  mobileDescription: String
  name: String
  operatingCompany: OperatingCompany
  payload: JSON
  regions: [Region!]
  settings: Setting
  tags: String
  tourStops: [TourStop!]
  updatedAt: String
  visible: Boolean
  webUrls: [WebUrl!]
}

type TourStop {
  accessibilityInformation: AccessibilityInformation
  active: Boolean
  addresses: [Address!]
  categories: [Category!]
  category: Category
  certificates: [Certificate!]
  contact: Contact
  createdAt: String
  dataProvider: DataProvider
  description: String
  id: ID
  location: Location
  mediaContents: [MediaContent!]
  mobileDescription: String
  name: String
  operatingCompany: OperatingCompany
  payload: JSON
  settings: Setting
  tagList: [String!]
  updatedAt: String
  visible: Boolean
  webUrls: [WebUrl!]
}

input TourStopInput {
  name: String!
  description: String
  mobileDescription: String
  active: Boolean
  categoryName: String
  payload: JSON
  categories: [CategoryInput!]
  addresses: [AddressInput!]
  contact: ContactInput
  operatingCompany: OperatingCompanyInput
  webUrls: [WebUrlInput!]
  mediaContents: [MediaContentInput!]
  location: LocationInput
  certificates: [CertificateInput!]
  accessibilityInformation: AccessibilityInformationInput
  tags: [String!]
}

enum ToursOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  id_DESC
  id_ASC
  name_DESC
  name_ASC
  RAND
}

# Autogenerated return type of UpdateWasteTourDates
type UpdateWasteTourDatesPayload {
  id: ID!
}

enum WasteLocationOrder {
  createdAt_DESC
  createdAt_ASC
  updatedAt_DESC
  updatedAt_ASC
  id_DESC
  id_ASC
  street_DESC
  street_ASC
}

type WasteLocationType {
  address: Address
  addressId: Int
  createdAt: String
  id: ID
  listPickUpDates: [String!]
  pickUpTimes: [WastePickUpTime!]
  updatedAt: String
  wasteTour: WasteTour
  wasteType: String
}

input WasteLocationTypeInput {
  wasteType: String
  addressId: Int
  address: AddressInput
}

type WastePickUpTime {
  createdAt: String
  id: ID
  pickupDate: String
  updatedAt: String
  wasteLocationType: WasteLocationType
  wasteLocationTypeId: ID
}

type WasteTour {
  id: ID
  title: String
  wasteType: String
}

type WebUrl {
  description: String
  id: ID
  url: String
}

input WebUrlInput {
  url: String
  description: String
}
