type AccessibilityInformation {
"""
Eine Beschreibung der Barrierefreiheitsmerkmale oder -dienste.
"""
description: String
"""
Eindeutiger Bezeichner für die Barrierefreiheitsinformationen.
"""
id: ID
"""
Typ der Barrierefreiheitsinformationen (z.B. Rollstuhlgerecht, Gebärdendolmetscher).
"""
types: String
"""
Eine Liste von URLs mit zusätzlichen Informationen zur Barrierefreiheit.
"""
urls: [WebUrl!]
}

input AccessibilityInformationInput {
"""
Eine Beschreibung der Barrierefreiheitsmerkmale oder -dienste.
"""
description: String
"""
Typ der Barrierefreiheitsinformationen (z.B. Rollstuhlgerecht, Gebärdendolmetscher).
"""
types: String
"""
Eine Liste von URLs mit zusätzlichen Informationen zur Barrierefreiheit.
"""
urls: [WebUrlInput!]
}

type Address {
"""
Zusätzliche Adressinformationen wie z.B. Gebäudenummer oder Etage.
"""
addition: String
"""
Die Stadt, in der sich die Adresse befindet.
"""
city: String
"""
Geographische Informationen (Breitengrad und Längengrad) zur Adresse.
"""
geoLocation: GeoLocation
"""
Eindeutiger Bezeichner für die Adresse.
"""
id: ID
"""
Art der Adresse, z.B. Wohnadresse, Geschäftsadresse.
"""
kind: String
"""
Straßenname und Hausnummer.
"""
street: String
"""
Liste der Müllsammelstellenarten, die mit dieser Adresse verknüpft sind.
"""
wasteLocationTypes: [WasteLocationType!]
"""
Postleitzahl der Adresse.
"""
zip: String
}

input AddressInput {
"""
Eindeutiger Bezeichner für die Adressdaten.
"""
id: Int
"""
Zusätzliche Adressinformationen wie z.B. Gebäudenummer oder Etage.
"""
addition: String
"""
Straßenname und Hausnummer.
"""
street: String
"""
Postleitzahl der Adresse.
"""
zip: String
"""
Die Stadt, in der sich die Adresse befindet.
"""
city: String
"""
Art der Adresse, z.B. Wohnadresse, Geschäftsadresse.
"""
kind: String
"""
Geographische Informationen zur Adresse als Input.
"""
geoLocation: GeoLocationInput
}

"""
Repräsentiert jeden primitiven Datentyp (z.B. String, Zahl, Boolean).
"""
scalar AnyPrimitive

type AppUserContent {
"""
Vom App-Benutzer erstellter Inhalt.
"""
content: String
"""
Zeitstempel, wann der Inhalt erstellt wurde.
"""
createdAt: String
"""
Datenquelle, die der Benutzer zur Verfügung gestellt hat.
"""
dataSource: String
"""
Typ oder Format der Daten.
"""
dataType: String
"""
Eindeutiger Bezeichner für den vom Benutzer erstellten Inhalt.
"""
id: ID
"""
Zeitstempel, wann der Inhalt zuletzt aktualisiert wurde.
"""
updatedAt: String
}

type AssignWasteLocationToTourPayload {
"""
Eindeutiger Bezeichner für die zugewiesene Müllsammelstelle einer Tour.
"""
id: ID!
}

enum CategoriesOrder {
"""
Sortierung nach Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
"""
Sortierung nach dem Namen in absteigender Reihenfolge.
"""
name_DESC
"""
Sortierung nach dem Namen in aufsteigender Reihenfolge.
"""
name_ASC
}

type Category {
"""
Liste der Unterkategorien unter dieser Kategorie.
"""
children: [Category!]
"""
Veranstaltungsdatensätze, die mit dieser Kategorie verbunden sind, gefiltert nach Standort.
"""
eventRecords(location: String): [EventRecord!]
"""
Anzahl der Veranstaltungsdatensätze für diese Kategorie an dem angegebenen Standort.
"""
eventRecordsCount(location: String): Int
"""
Generische Elemente, die mit dieser Kategorie verbunden sind, gefiltert nach Standort.
"""
genericItems(location: String): [GenericItem!]
"""
Anzahl der generischen Elemente für diese Kategorie an dem angegebenen Standort.
"""
genericItemsCount(location: String): Int
"""
Eindeutiger Bezeichner für die Kategorie.
"""
id: ID
"""
Name der Kategorie.
"""
name: String
"""
Nachrichtenartikel, die mit dieser Kategorie verknüpft sind.
"""
newsItems: [NewsItem!]
"""
Anzahl der Nachrichtenartikel in dieser Kategorie.
"""
newsItemsCount: Int
"""
Übergeordnete Kategorie für diese Kategorie.
"""
parent: Category
"""
Interessante Orte, die mit dieser Kategorie verbunden sind, gefiltert nach Standort.
"""
pointsOfInterest(location: String): [PointOfInterest!]
"""
Anzahl der interessanten Orte für diese Kategorie an dem angegebenen Standort.
"""
pointsOfInterestCount(location: String): Int
"""
Anzahl der interessanten Orte in dieser Kategorie und den dazugehörigen Unterkategorien.
"""
pointsOfInterestTreeCount(location: String): Int
"""
Touren, die mit dieser Kategorie verbunden sind, gefiltert nach Standort.
"""
tours(location: String): [Tour!]
"""
Anzahl der Touren für diese Kategorie an dem angegebenen Standort.
"""
toursCount(location: String): Int
"""
Anzahl der Touren in dieser Kategorie und den dazugehörigen Unterkategorien.
"""
toursTreeCount(location: String): Int
"""
Bevorstehende Veranstaltungen, die mit dieser Kategorie verbunden sind, gefiltert nach Standort.
"""
upcomingEventRecords(location: String): [EventRecord!]
"""
Anzahl bevorstehender Veranstaltungen in dieser Kategorie an dem angegebenen Standort.
"""
upcomingEventRecordsCount(location: String): Int
}

input CategoryInput {
"""
Name der Kategorie, die erstellt oder aktualisiert werden soll.
"""
name: String
}

type Certificate {
"""
Eindeutiger Bezeichner für das Zertifikat.
"""
id: ID
"""
Name des Zertifikats.
"""
name: String
}

input CertificateInput {
"""
Name des Zertifikats, das erstellt oder aktualisiert werden soll.
"""
name: String
}

type Contact {
"""
E-Mail-Adresse des Kontakts.
"""
email: String
"""
Faxnummer des Kontakts.
"""
fax: String
"""
Vorname des Kontakts.
"""
firstName: String
"""
Eindeutiger Bezeichner für den Kontakt.
"""
id: ID
"""
Nachname des Kontakts.
"""
lastName: String
"""
Telefonnummer des Kontakts.
"""
phone: String
"""
Eine Liste von URLs, die mit dem Kontakt verbunden sind.
"""
webUrls: [WebUrl!]
}

input ContactInput {
"""
Vorname des Kontakts, der erstellt oder aktualisiert werden soll.
"""
firstName: String
"""
Nachname des Kontakts, der erstellt oder aktualisiert werden soll.
"""
lastName: String
"""
Telefonnummer des Kontakts, der erstellt oder aktualisiert werden soll.
"""
phone: String
"""
Faxnummer des Kontakts, der erstellt oder aktualisiert werden soll.
"""
fax: String
"""
Eine Liste von URLs, die mit dem Kontakt verbunden sind.
"""
webUrls: [WebUrlInput!]
"""
E-Mail-Adresse des Kontakts, der erstellt oder aktualisiert werden soll.
"""
email: String
}

type ContentBlock {
"""
Hauptinhalt des Inhaltsblocks.
"""
body: String
"""
Zeitstempel, wann der Inhaltsblock erstellt wurde.
"""
createdAt: String
"""
Eindeutiger Bezeichner für den Inhaltsblock.
"""
id: ID
"""
Einleitungstext des Inhaltsblocks.
"""
intro: String
"""
Liste der Medieninhalte, die mit diesem Inhaltsblock verbunden sind.
"""
mediaContents: [MediaContent!]
"""
Titel des Inhaltsblocks.
"""
title: String
"""
Zeitstempel, wann der Inhaltsblock zuletzt aktualisiert wurde.
"""
updatedAt: String
}

input ContentBlockInput {
"""
Titel des Inhaltsblocks, der erstellt oder aktualisiert werden soll.
"""
title: String
"""
Einleitungstext des Inhaltsblocks, der erstellt oder aktualisiert werden soll.
"""
intro: String
"""
Hauptinhalt des Inhaltsblocks, der erstellt oder aktualisiert werden soll.
"""
body: String
"""
Liste der Medieninhalte, die mit diesem Inhaltsblock verbunden sind.
"""
mediaContents: [MediaContentInput!]
}

type DataProvider {
"""
Adresse des Datenanbieters.
"""
address: Address
"""
Kontaktinformationen des Datenanbieters.
"""
contact: Contact
"""
Datentyp, den der Anbieter zur Verfügung stellt.
"""
dataType: String
"""
Beschreibung des Datenanbieters und seiner Dienste.
"""
description: String
"""
Eindeutiger Bezeichner für den Datenanbieter.
"""
id: ID
"""
URL zum Logo des Datenanbieters.
"""
logo: WebUrl
"""
Name des Datenanbieters.
"""
name: String
"""
Zusätzliche Hinweise oder Anmerkungen zum Datenanbieter.
"""
notice: String
}

type Date {
"""
Enddatum des Ereignisses oder Zeitraums.
"""
dateEnd: String
"""
Startdatum des Ereignisses oder Zeitraums.
"""
dateStart: String
"""
Eindeutiger Bezeichner für das Datum.
"""
id: ID
"""
Beschreibung der Zeit, z.B. 'ganztägig' oder 'vormittags'.
"""
timeDescription: String
"""
Endzeit des Ereignisses oder Zeitraums.
"""
timeEnd: String
"""
Startzeit des Ereignisses oder Zeitraums.
"""
timeStart: String
"""
Ob nur die Zeitbeschreibung verwendet wird.
"""
useOnlyTimeDescription: String
"""
Wochentag des Ereignisses oder Zeitraums.
"""
weekday: String
}

input DateInput {
"""
Wochentag des Ereignisses oder Zeitraums, der erstellt oder aktualisiert werden soll.
"""
weekday: String
"""
Startdatum des Ereignisses oder Zeitraums, der erstellt oder aktualisiert werden soll.
"""
dateStart: String
"""
Enddatum des Ereignisses oder Zeitraums, der erstellt oder aktualisiert werden soll.
"""
dateEnd: String
"""
Startzeit des Ereignisses oder Zeitraums, der erstellt oder aktualisiert werden soll.
"""
timeStart: String
"""
Endzeit des Ereignisses oder Zeitraums, der erstellt oder aktualisiert werden soll.
"""
timeEnd: String
"""
Beschreibung der Zeit, die erstellt oder aktualisiert werden soll.
"""
timeDescription: String
"""
Gibt an, ob nur die Zeitbeschreibung verwendet werden soll.
"""
useOnlyTimeDescription: Boolean
}

type Destroy {
"""
Eindeutiger Bezeichner des zerstörten Objekts.
"""
id: Int
"""
Status der Zerstörung, z.B. 'erfolgreich'.
"""
status: String
"""
Statuscode der Zerstörung, z.B. 200 für Erfolg.
"""
statusCode: Int
}

type EventRecord {
"""
Informationen zur Barrierefreiheit der Veranstaltung.
"""
accessibilityInformation: AccessibilityInformation
"""
Liste der Adressen, die mit der Veranstaltung verbunden sind.
"""
addresses: [Address!]
"""
Liste der Kategorien, zu denen die Veranstaltung gehört.
"""
categories: [Category!]
"""
Die Hauptkategorie, zu der die Veranstaltung gehört.
"""
category: Category
"""
Liste der Kontakte, die mit der Veranstaltung verbunden sind.
"""
contacts: [Contact!]
"""
Zeitstempel, wann die Veranstaltung erstellt wurde.
"""
createdAt: String
"""
Der Datenanbieter, der diese Veranstaltung zur Verfügung stellt.
"""
dataProvider: DataProvider
"""
Liste der Daten und Zeiten, die mit der Veranstaltung verbunden sind.
"""
dates: [Date!]
"""
Eine Beschreibung der Veranstaltung.
"""
description: String
"""
Externe ID der Veranstaltung, falls sie von einem anderen System stammt.
"""
externalId: String
"""
Eindeutiger Bezeichner für die Veranstaltung.
"""
id: ID
"""
Das Datum, an dem die Veranstaltung aufgelistet wurde.
"""
listDate: String
"""
Der Standort der Veranstaltung.
"""
location: Location
"""
Liste der Medieninhalte, die mit der Veranstaltung verknüpft sind.
"""
mediaContents: [MediaContent!]
"""
Das Unternehmen oder die Organisation, die die Veranstaltung organisiert.
"""
organizer: OperatingCompany
"""
Die ID der übergeordneten Veranstaltung, falls zutreffend.
"""
parentId: Int
"""
Preisinformationen, die mit der Veranstaltung verbunden sind.
"""
priceInformations: [Price!]
"""
Region, in der die Veranstaltung stattfindet.
"""
region: Region
"""
Eindeutige ID der Region, in der die Veranstaltung stattfindet.
"""
regionId: String
"""
Gibt an, ob die Veranstaltung wiederholt wird.
"""
repeat: Boolean
"""
Details zur Wiederholungsdauer der Veranstaltung.
"""
repeatDuration: RepeatDuration
"""
Einstellungen, die für die Veranstaltung festgelegt sind.
"""
settings: Setting
"""
Liste der Tags, die der Veranstaltung zugeordnet sind.
"""
tagList: [String!]
"""
Der Titel der Veranstaltung.
"""
title: String
"""
Zeitstempel, wann die Veranstaltung zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Liste von URLs, die mit der Veranstaltung verbunden sind.
"""
urls: [WebUrl!]
"""
Gibt an, ob die Veranstaltung sichtbar ist.
"""
visible: Boolean
}

enum EventRecordsOrder {
"""
Sortierung nach dem Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach dem Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
"""
Sortierung nach dem Titel in absteigender Reihenfolge.
"""
title_DESC
"""
Sortierung nach dem Titel in aufsteigender Reihenfolge.
"""
title_ASC
"""
Sortierung nach dem Listen-Datum in absteigender Reihenfolge.
"""
listDate_DESC
"""
Sortierung nach dem Listen-Datum in aufsteigender Reihenfolge.
"""
listDate_ASC
}

type GenericItem {
"""
Liste der Barrierefreiheitsinformationen, die mit dem generischen Element verbunden sind.
"""
accessibilityInformations: [AccessibilityInformation!]
"""
Liste der Adressen, die mit dem generischen Element verbunden sind.
"""
addresses: [Address!]
"""
Der Autor des generischen Elements.
"""
author: String
"""
Liste der Kategorien, zu denen das generische Element gehört.
"""
categories: [Category!]
"""
Liste der Unternehmen, die mit dem generischen Element verbunden sind.
"""
companies: [OperatingCompany!]
"""
Liste der Kontakte, die mit dem generischen Element verbunden sind.
"""
contacts: [Contact!]
"""
Liste der Inhaltsblöcke, die mit dem generischen Element verbunden sind.
"""
contentBlocks: [ContentBlock!]
"""
Zeitstempel, wann das generische Element erstellt wurde.
"""
createdAt: String
"""
Der Datenanbieter, der das generische Element bereitstellt.
"""
dataProvider: DataProvider
"""
Liste der Daten und Zeiten, die mit dem generischen Element verbunden sind.
"""
dates: [Date!]
"""
Externe ID des generischen Elements, falls es von einem anderen System stammt.
"""
externalId: String
"""
Liste der Unterelemente, die diesem generischen Element zugeordnet sind.
"""
genericItems: [GenericItem!]
"""
Typ des generischen Elements.
"""
genericType: String
"""
Eindeutiger Bezeichner für das generische Element.
"""
id: ID
"""
Liste der Standorte, die mit dem generischen Element verbunden sind.
"""
locations: [Location!]
"""
Liste der Medieninhalte, die mit dem generischen Element verknüpft sind.
"""
mediaContents: [MediaContent!]
"""
Öffnungszeiten, die mit dem generischen Element verbunden sind.
"""
openingHours: [OpeningHour!]
"""
Zusätzliche, unstrukturierte Daten, die mit dem generischen Element verbunden sind.
"""
payload: JSON
"""
Preisinformationen, die mit dem generischen Element verbunden sind.
"""
priceInformations: [Price!]
"""
Das Veröffentlichungsdatum des generischen Elements.
"""
publicationDate: String
"""
Zeitstempel, wann das generische Element veröffentlicht wurde.
"""
publishedAt: String
"""
Einstellungen, die für das generische Element festgelegt sind.
"""
settings: Setting
"""
Der Titel des generischen Elements.
"""
title: String
"""
Zeitstempel, wann das generische Element zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Gibt an, ob das generische Element sichtbar ist.
"""
visible: Boolean
"""
Liste von URLs, die mit dem generischen Element verbunden sind.
"""
webUrls: [WebUrl!]
}

input GenericItemInput {
"""
Gibt an, ob das generische Element erzwungen erstellt werden soll, auch wenn es bereits existiert.
"""
forceCreate: Boolean
"""
Gibt an, ob eine Push-Benachrichtigung gesendet werden soll.
"""
pushNotification: Boolean
"""
Der Autor des generischen Elements.
"""
author: String
"""
Der Titel des generischen Elements.
"""
title: String
"""
Typ des generischen Elements.
"""
genericType: String
"""
Externe ID des generischen Elements, falls es von einem anderen System stammt.
"""
externalId: String
"""
Das Veröffentlichungsdatum des generischen Elements.
"""
publicationDate: String
"""
Zeitstempel, wann das generische Element veröffentlicht wurde.
"""
publishedAt: String
"""
Der Name der Kategorie, zu der das generische Element gehört.
"""
categoryName: String
"""
Zusätzliche, unstrukturierte Daten, die mit dem generischen Element verbunden sind.
"""
payload: JSON
"""
Liste der Kontakte, die mit dem generischen Element verbunden sind.
"""
contacts: [ContactInput!]
"""
Liste der Unterelemente, die diesem generischen Element zugeordnet sind.
"""
genericItems: [GenericItemInput!]
"""
Liste der Unternehmen, die mit dem generischen Element verbunden sind.
"""
companies: [OperatingCompanyInput!]
"""
Liste der Kategorien, zu denen das generische Element gehört.
"""
categories: [CategoryInput!]
"""
Liste der URLs, die mit dem generischen Element verbunden sind.
"""
webUrls: [WebUrlInput!]
"""
Liste der Adressen, die mit dem generischen Element verbunden sind.
"""
addresses: [AddressInput!]
"""
Liste der Inhaltsblöcke, die mit dem generischen Element verbunden sind.
"""
contentBlocks: [ContentBlockInput!]
"""
Öffnungszeiten, die mit dem generischen Element verbunden sind.
"""
openingHours: [OpeningHourInput!]
"""
Preisinformationen, die mit dem generischen Element verbunden sind.
"""
priceInformations: [PriceInput!]
"""
Liste der Medieninhalte, die mit dem generischen Element verknüpft sind.
"""
mediaContents: [MediaContentInput!]
"""
Liste der Standorte, die mit dem generischen Element verbunden sind.
"""
locations: [LocationInput!]
"""
Liste der Daten und Zeiten, die mit dem generischen Element verbunden sind.
"""
dates: [DateInput!]
"""
Liste der Barrierefreiheitsinformationen, die mit dem generischen Element verbunden sind.
"""
accessibilityInformations: [AccessibilityInformationInput!]
}

enum GenericItemOrder {
"""
Sortierung nach dem Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach dem Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach dem Veröffentlichungsdatum in absteigender Reihenfolge.
"""
publishedAt_DESC
"""
Sortierung nach dem Veröffentlichungsdatum in aufsteigender Reihenfolge.
"""
publishedAt_ASC
"""
Sortierung nach dem Veröffentlichungsdatum in absteigender Reihenfolge.
"""
publicationDate_DESC
"""
Sortierung nach dem Veröffentlichungsdatum in aufsteigender Reihenfolge.
"""
publicationDate_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
}

type GeoLocation {
"""
Eindeutiger Bezeichner für die Geolocation.
"""
id: ID
"""
Breitengrad der Geolocation.
"""
latitude: Float
"""
Längengrad der Geolocation.
"""
longitude: Float
}

input GeoLocationInput {
"""
Breitengrad der Geolocation als Eingabe.
"""
latitude: AnyPrimitive
"""
Längengrad der Geolocation als Eingabe.
"""
longitude: AnyPrimitive
}

"""
Ein spezieller JSON-Typ, der mehrsprachigen Text repräsentiert, z.B. in verschiedenen Sprachen wie Deutsch und Englisch.
"""
scalar I18nJSON

"""
Repräsentiert untypisiertes JSON.
"""
scalar JSON

type Location {
"""
Abteilung oder Bereich, zu dem der Standort gehört.
"""
department: String
"""
Bezirk, in dem sich der Standort befindet.
"""
district: String
"""
Geographische Informationen (Breitengrad und Längengrad) des Standorts.
"""
geoLocation: GeoLocation
"""
Eindeutiger Bezeichner für den Standort.
"""
id: ID
"""
Name des Standorts.
"""
name: String
"""
Name der Region, in der sich der Standort befindet.
"""
regionName: String
"""
Bundesland oder Staat, in dem sich der Standort befindet.
"""
state: String
}

input LocationInput {
"""
Name des Standorts als Eingabe.
"""
name: String
"""
Abteilung oder Bereich, zu dem der Standort gehört, als Eingabe.
"""
department: String
"""
Bezirk, in dem sich der Standort befindet, als Eingabe.
"""
district: String
"""
Name der Region, in der sich der Standort befindet, als Eingabe.
"""
regionName: String
"""
Bundesland oder Staat, in dem sich der Standort befindet, als Eingabe.
"""
state: String
"""
Geographische Informationen (Breitengrad und Längengrad) des Standorts als Eingabe.
"""
geoLocation: GeoLocationInput
}

type Lunch {
"""
Zeitstempel, wann das Mittagessen erstellt wurde.
"""
createdAt: String
"""
Liste der Daten, an denen das Mittagessen angeboten wird.
"""
dates: [Date!]
"""
Eindeutiger Bezeichner für das Mittagessen.
"""
id: ID
"""
Datum, an dem das Mittagessen aufgelistet wurde.
"""
listDate: String
"""
Liste der Mittagessen-Angebote.
"""
lunchOffers: [LunchOffer!]
"""
Der Ort von Interesse, an dem das Mittagessen angeboten wird.
"""
pointOfInterest: PointOfInterest!
"""
Attribute des Ortes von Interesse in Bezug auf das Mittagessen.
"""
pointOfInterestAttributes: String
"""
Beschreibung oder Text zum Mittagessen.
"""
text: String
"""
Zeitstempel, wann das Mittagessen zuletzt aktualisiert wurde.
"""
updatedAt: String
}

input LunchInput {
"""
Beschreibung oder Text zum Mittagessen als Eingabe.
"""
text: String
"""
Liste der Daten, an denen das Mittagessen angeboten wird, als Eingabe.
"""
dates: [DateInput!]
"""
Liste der Mittagessen-Angebote als Eingabe.
"""
lunchOffers: [LunchOfferInput!]
"""
Eindeutiger Bezeichner des Ortes von Interesse, an dem das Mittagessen angeboten wird, als Eingabe.
"""
pointOfInterestId: ID
"""
Attribute des Ortes von Interesse in Bezug auf das Mittagessen als Eingabe.
"""
pointOfInterestAttributes: String
}

type LunchOffer {
"""
Zeitstempel, wann das Mittagessen-Angebot erstellt wurde.
"""
createdAt: String
"""
Eindeutiger Bezeichner für das Mittagessen-Angebot.
"""
id: ID
"""
Name des Mittagessen-Angebots.
"""
name: String
"""
Preis des Mittagessen-Angebots.
"""
price: String
"""
Zeitstempel, wann das Mittagessen-Angebot zuletzt aktualisiert wurde.
"""
updatedAt: String
}

input LunchOfferInput {
"""
Name des Mittagessen-Angebots als Eingabe.
"""
name: String
"""
Preis des Mittagessen-Angebots als Eingabe.
"""
price: String
}

enum LunchesOrder {
"""
Sortierung nach Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach ID in aufsteigender Reihenfolge.
"""
id_ASC
}
type MediaContent {
"""
Beschreibungstext oder Bildunterschrift für den Medieninhalt.
"""
captionText: String
"""
Der Typ des Inhalts, z.B. Bild, Video oder Audio.
"""
contentType: String
"""
Informationen zum Urheberrecht für den Medieninhalt.
"""
copyright: String
"""
Die Höhe des Medieninhalts in Pixeln.
"""
height: Int
"""
Eindeutiger Bezeichner für den Medieninhalt.
"""
id: ID
"""
Die URL-Quelle des Medieninhalts.
"""
sourceUrl: WebUrl
"""
Die Breite des Medieninhalts in Pixeln.
"""
width: Int
}

input MediaContentInput {
"""
Beschreibungstext oder Bildunterschrift für den Medieninhalt als Eingabe.
"""
captionText: String
"""
Informationen zum Urheberrecht für den Medieninhalt als Eingabe.
"""
copyright: String
"""
Die Höhe des Medieninhalts in Pixeln als Eingabe.
"""
height: AnyPrimitive
"""
Die Breite des Medieninhalts in Pixeln als Eingabe.
"""
width: AnyPrimitive
"""
Der Typ des Inhalts, z.B. Bild, Video oder Audio als Eingabe.
"""
contentType: String
"""
Die URL-Quelle des Medieninhalts als Eingabe.
"""
sourceUrl: WebUrlInput
}

type Mutation {
assignWasteLocationToTour(
"""
Eindeutiger Bezeichner für die Tour.
"""
id: ID
"""
Erzwingt das Erstellen der Müllsammelstelle für die Tour, auch wenn sie bereits existiert.
"""
forceCreate: Boolean
"""
Eindeutiger Bezeichner für die Tour, der die Müllsammelstelle zugewiesen wird.
"""
tourId: ID
"""
Gibt an, ob die Müllsammelstelle der Tour zugewiesen wird.
"""
tourValue: Boolean
"""
Eindeutiger Bezeichner für die Adresse der Müllsammelstelle.
"""
addressId: ID
): AssignWasteLocationToTourPayload!

changeVisibility(
"""
Eindeutiger Bezeichner des Datensatzes, dessen Sichtbarkeit geändert werden soll.
"""
id: ID!
"""
Der Typ des Datensatzes, dessen Sichtbarkeit geändert wird.
"""
recordType: String!
"""
Gibt an, ob der Datensatz sichtbar gemacht wird oder nicht.
"""
visible: Boolean!
): Status!

commentSurvey(
"""
Eindeutiger Bezeichner der Umfrage, die kommentiert wird.
"""
surveyId: ID!
"""
Der Kommentar, der zur Umfrage hinzugefügt wird.
"""
message: String!
): Status!

createAppUserContent(
"""
Quelle der Daten, die vom Benutzer bereitgestellt wurden.
"""
dataSource: String
"""
Der Typ der bereitgestellten Daten.
"""
dataType: String
"""
Der Inhalt, der vom Benutzer erstellt wurde.
"""
content: String
): AppUserContent!

createEventRecord(
"""
Eindeutiger Bezeichner für das Ereignis.
"""
id: ID
"""
Erzwingt das Erstellen des Ereignisses, auch wenn es bereits existiert.
"""
forceCreate: Boolean
"""
ID des übergeordneten Ereignisses, falls zutreffend.
"""
parentId: Int
"""
Beschreibung des Ereignisses.
"""
description: String
"""
Externe ID des Ereignisses, falls es von einem anderen System stammt.
"""
externalId: String
"""
Titel des Ereignisses.
"""
title: String
"""
Liste der Daten und Zeiten, die mit dem Ereignis verbunden sind.
"""
dates: [DateInput!]
"""
Gibt an, ob das Ereignis wiederholt wird.
"""
repeat: Boolean
"""
Details zur Wiederholungsdauer des Ereignisses.
"""
repeatDuration: RepeatDurationInput
"""
Der Name der Kategorie, zu der das Ereignis gehört.
"""
categoryName: String
"""
Liste der Kategorien, zu denen das Ereignis gehört.
"""
categories: [CategoryInput!]
"""
Name der Region, in der das Ereignis stattfindet.
"""
regionName: String
"""
Details zur Region, in der das Ereignis stattfindet.
"""
region: RegionInput
"""
Liste der Adressen, die mit dem Ereignis verbunden sind.
"""
addresses: [AddressInput!]
"""
Details zum Standort des Ereignisses.
"""
location: LocationInput
"""
Liste der Kontakte, die mit dem Ereignis verbunden sind.
"""
contacts: [ContactInput!]
"""
Liste von URLs, die mit dem Ereignis verbunden sind.
"""
urls: [WebUrlInput!]
"""
Liste der Medieninhalte, die mit dem Ereignis verbunden sind.
"""
mediaContents: [MediaContentInput!]
"""
Organisator des Ereignisses.
"""
organizer: OperatingCompanyInput
"""
Preisinformationen für das Ereignis.
"""
priceInformations: [PriceInput!]
"""
Informationen zur Barrierefreiheit des Ereignisses.
"""
accessibilityInformation: AccessibilityInformationInput
"""
Liste der Tags, die mit dem Ereignis verbunden sind.
"""
tags: [String!]
): EventRecord!


createGenericItem(
"""
Eindeutiger Bezeichner für das generische Element.
"""
id: ID
"""
Erzwingt das Erstellen des generischen Elements, auch wenn es bereits existiert.
"""
forceCreate: Boolean
"""
Gibt an, ob eine Push-Benachrichtigung gesendet werden soll.
"""
pushNotification: Boolean
"""
Der Autor des generischen Elements.
"""
author: String
"""
Der Titel des generischen Elements.
"""
title: String
"""
Typ des generischen Elements.
"""
genericType: String
"""
Externe ID des generischen Elements, falls es von einem anderen System stammt.
"""
externalId: String
"""
Veröffentlichungsdatum des generischen Elements.
"""
publicationDate: String
"""
Zeitstempel, wann das generische Element veröffentlicht wurde.
"""
publishedAt: String
"""
Der Name der Kategorie, zu der das generische Element gehört.
"""
categoryName: String
"""
Zusätzliche, unstrukturierte Daten, die mit dem generischen Element verbunden sind.
"""
payload: JSON
"""
Liste der Kontakte, die mit dem generischen Element verbunden sind.
"""
contacts: [ContactInput!]
"""
Liste der Unterelemente, die diesem generischen Element zugeordnet sind.
"""
genericItems: [GenericItemInput!]
"""
Liste der Unternehmen, die mit dem generischen Element verbunden sind.
"""
companies: [OperatingCompanyInput!]
"""
Liste der Kategorien, zu denen das generische Element gehört.
"""
categories: [CategoryInput!]
"""
Liste der URLs, die mit dem generischen Element verbunden sind.
"""
webUrls: [WebUrlInput!]
"""
Liste der Adressen, die mit dem generischen Element verbunden sind.
"""
addresses: [AddressInput!]
"""
Liste der Inhaltsblöcke, die mit dem generischen Element verbunden sind.
"""
contentBlocks: [ContentBlockInput!]
"""
Öffnungszeiten, die mit dem generischen Element verbunden sind.
"""
openingHours: [OpeningHourInput!]
"""
Preisinformationen, die mit dem generischen Element verbunden sind.
"""
priceInformations: [PriceInput!]
"""
Liste der Medieninhalte, die mit dem generischen Element verknüpft sind.
"""
mediaContents: [MediaContentInput!]
"""
Liste der Standorte, die mit dem generischen Element verbunden sind.
"""
locations: [LocationInput!]
"""
Liste der Daten und Zeiten, die mit dem generischen Element verbunden sind.
"""
dates: [DateInput!]
"""
Liste der Barrierefreiheitsinformationen, die mit dem generischen Element verbunden sind.
"""
accessibilityInformations: [AccessibilityInformationInput!]
): GenericItem!

createNewsItem(
"""
Eindeutiger Bezeichner für den Nachrichtenartikel.
"""
id: ID
"""
Erzwingt das Erstellen des Nachrichtenartikels, auch wenn er bereits existiert.
"""
forceCreate: Boolean
"""
Gibt an, ob eine Push-Benachrichtigung gesendet werden soll.
"""
pushNotification: Boolean
"""
Der Autor des Nachrichtenartikels.
"""
author: String
"""
Der Titel des Nachrichtenartikels.
"""
title: String
"""
Externe ID des Nachrichtenartikels, falls er von einem anderen System stammt.
"""
externalId: String
"""
Gibt an, ob die vollständige Version des Artikels angezeigt wird.
"""
fullVersion: Boolean
"""
Anzahl der Zeichen, die angezeigt werden sollen.
"""
charactersToBeShown: Int
"""
Typ des Nachrichtenartikels.
"""
newsType: String
"""
Veröffentlichungsdatum des Nachrichtenartikels.
"""
publicationDate: String
"""
Zeitstempel, wann der Nachrichtenartikel veröffentlicht wurde.
"""
publishedAt: String
"""
Gibt an, ob das Veröffentlichungsdatum angezeigt werden soll.
"""
showPublishDate: Boolean
"""
Der Name der Kategorie, zu der der Nachrichtenartikel gehört.
"""
categoryName: String
"""
Liste der Kategorien, zu denen der Nachrichtenartikel gehört.
"""
categories: [CategoryInput!]
"""
URL der Quelle des Nachrichtenartikels.
"""
sourceUrl: WebUrlInput
"""
Adresse, die mit dem Nachrichtenartikel verbunden ist.
"""
address: AddressInput
"""
Liste der Inhaltsblöcke, die mit dem Nachrichtenartikel verbunden sind.
"""
contentBlocks: [ContentBlockInput!]

): NewsItem!

createOrUpdateStaticContent(
"""
Erzwingt das Erstellen oder Aktualisieren des statischen Inhalts, auch wenn er bereits existiert.
"""
forceCreate: Boolean
"""
Eindeutiger Bezeichner für den statischen Inhalt.
"""
id: ID
"""
Der Name des statischen Inhalts.
"""
name: String
"""
Der Inhalt, der erstellt oder aktualisiert werden soll.
"""
content: String
"""
Der Datentyp des Inhalts.
"""
dataType: String!
"""
Die Version des statischen Inhalts.
"""
version: String

): PublicHtmlFile!

createOrUpdateSurveyPoll(
"""
Erzwingt das Erstellen oder Aktualisieren der Umfrage, auch wenn sie bereits existiert.
"""
forceCreate: Boolean
"""
Eindeutiger Bezeichner für die Umfrage.
"""
id: ID
"""
Der Titel der Umfrage in verschiedenen Sprachen.
"""
title: I18nJSON
"""
Beschreibung der Umfrage in verschiedenen Sprachen.
"""
description: I18nJSON
"""
Das Datum der Umfrage.
"""
date: DateInput
"""
Eindeutiger Bezeichner für die Frage der Umfrage.
"""
questionId: ID
"""
Der Titel der Umfragefrage in verschiedenen Sprachen.
"""
questionTitle: I18nJSON!
"""
Gibt an, ob mehrere Antworten auf die Frage erlaubt sind.
"""
questionAllowMultipleResponses: I18nJSON
"""
Liste der Antwortoptionen für die Umfrage.
"""
responseOptions: [JSON!]!
"""
Gibt an, ob Kommentare zu der Umfrage abgegeben werden können.
"""
canComment: Boolean
"""
Gibt an, ob die Umfrage mehrsprachig ist.
"""
isMultilingual: Boolean

): SurveyPoll!

createPointOfInterest(
"""
Eindeutiger Bezeichner für den Ort von Interesse.
"""
id: ID
"""
Erzwingt das Erstellen des Ortes von Interesse, auch wenn er bereits existiert.
"""
forceCreate: Boolean
"""
Der Name des Ortes von Interesse.
"""
name: String!
"""
Eine Beschreibung des Ortes von Interesse.
"""
description: String
"""
Beschreibung des Ortes von Interesse für mobile Geräte.
"""
mobileDescription: String
"""
Gibt an, ob der Ort von Interesse aktiv ist.
"""
active: Boolean
"""
Der Name der Kategorie, zu der der Ort von Interesse gehört.
"""
categoryName: String
"""
Zusätzliche, unstrukturierte Daten, die mit dem Ort von Interesse verbunden sind.
"""
payload: JSON
"""
Liste der Kategorien, zu denen der Ort von Interesse gehört.
"""
categories: [CategoryInput!]
"""
Liste der Adressen, die mit dem Ort von Interesse verbunden sind.
"""
addresses: [AddressInput!]
"""
Kontaktinformationen für den Ort von Interesse.
"""
contact: ContactInput
"""
Preisinformationen für den Ort von Interesse.
"""
priceInformations: [PriceInput!]
"""
Öffnungszeiten für den Ort von Interesse.
"""
openingHours: [OpeningHourInput!]
"""
Betreibergesellschaft des Ortes von Interesse.
"""
operatingCompany: OperatingCompanyInput
"""
Liste der URLs, die mit dem Ort von Interesse verbunden sind.
"""
webUrls: [WebUrlInput!]
"""
Liste der Medieninhalte, die mit dem Ort von Interesse verknüpft sind.
"""
mediaContents: [MediaContentInput!]
"""
Geographische Lage des Ortes von Interesse.
"""
location: LocationInput
"""
Zertifikate, die dem Ort von Interesse zugeordnet sind.
"""
certificates: [CertificateInput!]
"""
Barrierefreiheitsinformationen für den Ort von Interesse.
"""
accessibilityInformation: AccessibilityInformationInput
"""
Liste der Tags, die mit dem Ort von Interesse verbunden sind.
"""
tags: [String!]
"""
Liste der Mittagessen-Angebote, die am Ort von Interesse angeboten werden.
"""
lunches: [LunchInput!]

): PointOfInterest!

createTour(
"""
Eindeutiger Bezeichner für die Tour.
"""
id: ID
"""
Erzwingt das Erstellen der Tour, auch wenn sie bereits existiert.
"""
forceCreate: Boolean
"""
Der Name der Tour.
"""
name: String!
"""
Eine Beschreibung der Tour.
"""
description: String
"""
Beschreibung der Tour für mobile Geräte.
"""
mobileDescription: String
"""
Gibt an, ob die Tour aktiv ist.
"""
active: Boolean
"""
Der Name der Kategorie, zu der die Tour gehört.
"""
categoryName: String
"""
Zusätzliche, unstrukturierte Daten, die mit der Tour verbunden sind.
"""
payload: JSON
"""
Liste der Kategorien, zu denen die Tour gehört.
"""
categories: [CategoryInput!]
"""
Liste der Adressen, die mit der Tour verbunden sind.
"""
addresses: [AddressInput!]
"""
Kontaktinformationen für die Tour.
"""
contact: ContactInput
"""
Betreibergesellschaft der Tour.
"""
operatingCompany: OperatingCompanyInput
"""
Liste der URLs, die mit der Tour verbunden sind.
"""
webUrls: [WebUrlInput!]
"""
Liste der Medieninhalte, die mit der Tour verknüpft sind.
"""
mediaContents: [MediaContentInput!]
"""
Geographische Lage der Tour.
"""
location: LocationInput
"""
Zertifikate, die der Tour zugeordnet sind.
"""
certificates: [CertificateInput!]
"""
Barrierefreiheitsinformationen für die Tour.
"""
accessibilityInformation: AccessibilityInformationInput
"""
Länge der Tour in Kilometern.
"""
lengthKm: Int!
"""
Die Art der Fortbewegung während der Tour.
"""
meansOfTransportation: String
"""
Geographische Daten der Tourstrecke.
"""
geometryTourData: [GeoLocationInput!]
"""
Liste der Tags, die mit der Tour verbunden sind.
"""
tags: [String!]
"""
Liste der Tourstopps, die mit der Tour verbunden sind.
"""
tourStops: [TourStopInput!]

): Tour!

createWasteLocation(
"""
Eindeutiger Bezeichner für den Müllsammelort.
"""
id: ID
"""
Erzwingt das Erstellen des Müllsammelorts, auch wenn er bereits existiert.
"""
forceCreate: Boolean
"""
Straßenname des Müllsammelorts.
"""
street: String
"""
Stadt des Müllsammelorts.
"""
city: String
"""
Postleitzahl des Müllsammelorts.
"""
zip: String

): Address!

createWastePickUpTime(
"""
Datum der Müllabholung.
"""
pickupDate: String!
"""
Eindeutiger Bezeichner für den Typ des Müllsammelorts.
"""
wasteLocationTypeId: Int
"""
Typ des Müllsammelorts als Eingabe.
"""
wasteLocationType: WasteLocationTypeInput

): WastePickUpTime!

createWasteTour(
"""
Eindeutiger Bezeichner für die Mülltour.
"""
id: ID
"""
Erzwingt das Erstellen der Mülltour, auch wenn sie bereits existiert.
"""
forceCreate: Boolean
"""
Titel der Mülltour.
"""
title: String
"""
Art des Mülls, der während der Tour gesammelt wird.
"""
wasteType: String

): WasteTour!

destroyRecord(
"""
Eindeutiger Bezeichner des zu löschenden Datensatzes.
"""
id: ID
"""
Der Typ des Datensatzes, der gelöscht werden soll.
"""
recordType: String!
"""
Externe ID des zu löschenden Datensatzes, falls zutreffend.
"""
externalId: Int

): Destroy!

updateWasteTourDates(
"""
Eindeutiger Bezeichner der Mülltour, deren Daten aktualisiert werden.
"""
id: ID!
"""
Das Jahr, für das die Daten der Mülltour aktualisiert werden.
"""
year: String!
"""
Liste der neuen Abholdaten für die Mülltour.
"""
dates: [String!]

): UpdateWasteTourDatesPayload!

"""
`voteForSurvey` is deprecated. Use `votesForSurvey` instead.
"""
voteForSurvey(
"""
Eindeutiger Bezeichner für die Antwortoption, deren Stimmen erhöht werden.
"""
increaseId: ID
"""
Eindeutiger Bezeichner für die Antwortoption, deren Stimmen verringert werden.
"""
decreaseId: ID
): Status! @deprecated(reason: "Verwenden Sie stattdessen `votesForSurvey`.")

votesForSurvey(
"""
Liste der eindeutigen Bezeichner der Antwortoptionen, deren Stimmen erhöht werden.
"""
increaseId: [ID!]
"""
Liste der eindeutigen Bezeichner der Antwortoptionen, deren Stimmen verringert werden.
"""
decreaseId: [ID!]

): Status!
}

type NewsItem {
"""
Die Adresse, die mit dem Nachrichtenartikel verbunden ist.
"""
address: Address
"""
Der Autor des Nachrichtenartikels.
"""
author: String
"""
Liste der Kategorien, denen der Nachrichtenartikel zugeordnet ist.
"""
categories: [Category!]
"""
Anzahl der Zeichen, die im Nachrichtenartikel angezeigt werden sollen.
"""
charactersToBeShown: String
"""
Liste der Inhaltsblöcke, die im Nachrichtenartikel enthalten sind.
"""
contentBlocks: [ContentBlock!]
"""
Zeitstempel, wann der Nachrichtenartikel erstellt wurde.
"""
createdAt: String
"""
Der Datenanbieter, der den Nachrichtenartikel bereitgestellt hat.
"""
dataProvider: DataProvider
"""
Externe ID des Nachrichtenartikels, falls er von einem anderen System stammt.
"""
externalId: String
"""
Gibt an, ob die vollständige Version des Artikels angezeigt wird.
"""
fullVersion: Boolean
"""
Eindeutiger Bezeichner für den Nachrichtenartikel.
"""
id: ID
"""
Der Typ des Nachrichtenartikels.
"""
newsType: String
"""
Veröffentlichungsdatum des Nachrichtenartikels.
"""
publicationDate: String
"""
Zeitstempel, wann der Nachrichtenartikel veröffentlicht wurde.
"""
publishedAt: String
"""
Zeitstempel, wann die Push-Benachrichtigung für den Artikel gesendet wurde.
"""
pushNotificationsSentAt: String
"""
Einstellungen, die mit dem Nachrichtenartikel verbunden sind.
"""
settings: Setting
"""
Gibt an, ob das Veröffentlichungsdatum angezeigt werden soll.
"""
showPublishDate: Boolean
"""
Die URL-Quelle des Nachrichtenartikels.
"""
sourceUrl: WebUrl
"""
Der Titel des Nachrichtenartikels.
"""
title: String
"""
Zeitstempel, wann der Nachrichtenartikel zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Gibt an, ob der Nachrichtenartikel sichtbar ist.
"""
visible: Boolean
}

enum NewsItemsOrder {
"""
Sortierung nach dem Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach dem Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach dem Veröffentlichungsdatum in absteigender Reihenfolge.
"""
publishedAt_DESC
"""
Sortierung nach dem Veröffentlichungsdatum in aufsteigender Reihenfolge.
"""
publishedAt_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
}
type OpenWeatherMap {
"""
Liste von Wetterwarnungen im JSON-Format.
"""
alerts: [JSON!]
"""
Zeitstempel, wann die Wetterdaten erstellt wurden.
"""
createdAt: String
"""
Aktuelle Wetterdaten im JSON-Format.
"""
current: JSON
"""
Tägliche Wettervorhersage im JSON-Format.
"""
daily: [JSON!]
"""
Stündliche Wettervorhersage im JSON-Format.
"""
hourly: [JSON!]
"""
Eindeutiger Bezeichner für die Wetterdaten.
"""
id: ID
"""
Breitengrad des Standorts.
"""
lat: Float
"""
Längengrad des Standorts.
"""
lon: Float
"""
Zeitstempel, wann die Wetterdaten zuletzt aktualisiert wurden.
"""
updatedAt: String
}

enum OpenWeatherMapsOrder {
"""
Sortierung nach dem Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach dem Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
}

type OpeningHour {
"""
Das Startdatum der Öffnungszeit.
"""
dateFrom: String
"""
Das Enddatum der Öffnungszeit.
"""
dateTo: String
"""
Beschreibung der Öffnungszeiten.
"""
description: String
"""
Eindeutiger Bezeichner für die Öffnungszeiten.
"""
id: ID
"""
Gibt an, ob der Standort geöffnet ist.
"""
open: Boolean
"""
Sortiernummer für die Reihenfolge der Öffnungszeiten.
"""
sortNumber: Int
"""
Die Startzeit der Öffnungszeiten.
"""
timeFrom: String
"""
Die Endzeit der Öffnungszeiten.
"""
timeTo: String
"""
Wochentag der Öffnungszeiten.
"""
weekday: String
}

input OpeningHourInput {
"""
Wochentag der Öffnungszeiten als Eingabe.
"""
weekday: String
"""
Das Startdatum der Öffnungszeit als Eingabe.
"""
dateFrom: String
"""
Das Enddatum der Öffnungszeit als Eingabe.
"""
dateTo: String
"""
Die Startzeit der Öffnungszeiten als Eingabe.
"""
timeFrom: String
"""
Die Endzeit der Öffnungszeiten als Eingabe.
"""
timeTo: String
"""
Sortiernummer für die Reihenfolge der Öffnungszeiten als Eingabe.
"""
sortNumber: Int
"""
Gibt an, ob der Standort geöffnet ist als Eingabe.
"""
open: Boolean
"""
Beschreibung der Öffnungszeiten als Eingabe.
"""
description: String
}

type OperatingCompany {
"""
Adresse des Unternehmens.
"""
address: Address
"""
Kontaktinformationen des Unternehmens.
"""
contact: Contact
"""
Eindeutiger Bezeichner für das Unternehmen.
"""
id: ID
"""
Name des Unternehmens.
"""
name: String
}

input OperatingCompanyInput {
"""
Name des Unternehmens als Eingabe.
"""
name: String
"""
Adresse des Unternehmens als Eingabe.
"""
address: AddressInput
"""
Kontaktinformationen des Unternehmens als Eingabe.
"""
contact: ContactInput
}

type PointOfInterest {
"""
Informationen zur Barrierefreiheit für den Ort von Interesse.
"""
accessibilityInformation: AccessibilityInformation
"""
Gibt an, ob der Ort von Interesse aktiv ist.
"""
active: Boolean
"""
Liste der Adressen, die mit dem Ort von Interesse verbunden sind.
"""
addresses: [Address!]
"""
Liste der Kategorien, zu denen der Ort von Interesse gehört.
"""
categories: [Category!]
"""
Hauptkategorie, zu der der Ort von Interesse gehört.
"""
category: Category
"""
Zertifikate, die dem Ort von Interesse zugeordnet sind.
"""
certificates: [Certificate!]
"""
Kontaktinformationen für den Ort von Interesse.
"""
contact: Contact
"""
Zeitstempel, wann der Ort von Interesse erstellt wurde.
"""
createdAt: String
"""
Datenanbieter, der den Ort von Interesse bereitstellt.
"""
dataProvider: DataProvider
"""
Beschreibung des Ortes von Interesse.
"""
description: String
"""
Eindeutiger Bezeichner für den Ort von Interesse.
"""
id: ID
"""
Geographische Lage des Ortes von Interesse.
"""
location: Location
"""
Liste der Mittagessen-Angebote, die am Ort von Interesse verfügbar sind.
"""
lunches: [Lunch!]
"""
Liste der Medieninhalte, die mit dem Ort von Interesse verknüpft sind.
"""
mediaContents: [MediaContent!]
"""
Beschreibung des Ortes von Interesse für mobile Geräte.
"""
mobileDescription: String
"""
Name des Ortes von Interesse.
"""
name: String
"""
Öffnungszeiten des Ortes von Interesse.
"""
openingHours: [OpeningHour!]
"""
Betreibergesellschaft des Ortes von Interesse.
"""
operatingCompany: OperatingCompany
"""
Zusätzliche, unstrukturierte Daten, die mit dem Ort von Interesse verbunden sind.
"""
payload: JSON
"""
Preisinformationen für den Ort von Interesse.
"""
priceInformations: [Price!]
"""
Einstellungen, die mit dem Ort von Interesse verbunden sind.
"""
settings: Setting
"""
Liste der Tags, die dem Ort von Interesse zugeordnet sind.
"""
tagList: [String!]
"""
Zeitstempel, wann der Ort von Interesse zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Gibt an, ob der Ort von Interesse sichtbar ist.
"""
visible: Boolean
"""
Liste der URLs, die mit dem Ort von Interesse verbunden sind.
"""
webUrls: [WebUrl!]
}

enum PointsOfInterestOrder {
"""
Sortierung nach dem Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach dem Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
"""
Sortierung nach dem Namen in absteigender Reihenfolge.
"""
name_DESC
"""
Sortierung nach dem Namen in aufsteigender Reihenfolge.
"""
name_ASC
"""
Zufällige Sortierung der Orte von Interesse.
"""
RAND
}

type Price {
"""
Das Mindestalter, für das der Preis gilt.
"""
ageFrom: Int
"""
Das Höchstalter, für das der Preis gilt.
"""
ageTo: Int
"""
Der Betrag, den der Preis ausmacht.
"""
amount: Float
"""
Die Kategorie, zu der der Preis gehört.
"""
category: String
"""
Beschreibung des Preises.
"""
description: String
"""
Gibt an, ob es sich um einen Gruppenpreis handelt.
"""
groupPrice: Boolean
"""
Eindeutiger Bezeichner für den Preis.
"""
id: ID
"""
Maximale Anzahl von Erwachsenen, die für diesen Preis gelten.
"""
maxAdultCount: Int
"""
Maximale Anzahl von Kindern, die für diesen Preis gelten.
"""
maxChildrenCount: Int
"""
Minimale Anzahl von Erwachsenen, die für diesen Preis gelten.
"""
minAdultCount: Int
"""
Minimale Anzahl von Kindern, die für diesen Preis gelten.
"""
minChildrenCount: Int
"""
Name des Preises.
"""
name: String
}

input PriceInput {
"""
Name des Preises als Eingabe.
"""
name: String
"""
Der Betrag, den der Preis ausmacht, als Eingabe.
"""
amount: AnyPrimitive
"""
Gibt an, ob es sich um einen Gruppenpreis handelt, als Eingabe.
"""
groupPrice: Boolean
"""
Das Mindestalter, für das der Preis gilt, als Eingabe.
"""
ageFrom: Int
"""
Das Höchstalter, für das der Preis gilt, als Eingabe.
"""
ageTo: Int
"""
Minimale Anzahl von Erwachsenen, die für diesen Preis gelten, als Eingabe.
"""
minAdultCount: Int
"""
Maximale Anzahl von Erwachsenen, die für diesen Preis gelten, als Eingabe.
"""
maxAdultCount: Int
"""
Minimale Anzahl von Kindern, die für diesen Preis gelten, als Eingabe.
"""
minChildrenCount: Int
"""
Maximale Anzahl von Kindern, die für diesen Preis gelten, als Eingabe.
"""
maxChildrenCount: Int
"""
Beschreibung des Preises als Eingabe.
"""
description: String
"""
Die Kategorie, zu der der Preis gehört, als Eingabe.
"""
category: String
}

type PublicHtmlFile {
"""
Der Inhalt der öffentlichen HTML-Datei.
"""
content: String
"""
Zeitstempel, wann die HTML-Datei erstellt wurde.
"""
createdAt: String
"""
Der Datentyp der öffentlichen Datei.
"""
dataType: String
"""
Eindeutiger Bezeichner für die öffentliche HTML-Datei.
"""
id: ID
"""
Name der öffentlichen HTML-Datei.
"""
name: String
"""
Zeitstempel, wann die HTML-Datei zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Version der öffentlichen HTML-Datei.
"""
version: String
}

type PublicJsonFile {
"""
Der Inhalt der öffentlichen JSON-Datei.
"""
content: JSON!
"""
Zeitstempel, wann die JSON-Datei erstellt wurde.
"""
createdAt: String
"""
Der Datentyp der öffentlichen JSON-Datei.
"""
dataType: String
"""
Eindeutiger Bezeichner für die öffentliche JSON-Datei.
"""
id: ID
"""
Name der öffentlichen JSON-Datei.
"""
name: String!
"""
Zeitstempel, wann die JSON-Datei zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Version der öffentlichen JSON-Datei.
"""
version: String
}

type Query {
categories(
"""
Maximale Anzahl der zurückgegebenen Kategorien.
"""
limit: Int
"""
Anzahl der übersprungenen Kategorien vor der Rückgabe.
"""
skip: Int
"""
Liste der IDs, um spezifische Kategorien zu filtern.
"""
ids: [ID]
"""
Liste der IDs, die von den Ergebnissen ausgeschlossen werden.
"""
excludeIds: [ID]
"""
Reihenfolge, in der die Kategorien sortiert werden.
"""
order: CategoriesOrder = name_ASC

): [Category!]!

"""
Gibt die gesamte Kategoriehierarchie als JSON zurück.
"""
categoryTree: JSON!

"""
Führt eine Directus-Abfrage aus und gibt die Ergebnisse als JSON zurück.
"""
directus(query: String): JSON!

"""
Gibt das Ereignis mit der angegebenen ID zurück.
"""
eventRecord(id: ID!): EventRecord!

eventRecords(
"""
Datumsbereich, um die Ereignisse zu filtern.
"""
dateRange: [String]
"""
ID der Kategorie, um die Ereignisse zu filtern.
"""
categoryId: ID
"""
Anzahl der übersprungenen Ereignisse vor der Rückgabe.
"""
skip: Int
"""
Maximale Anzahl der zurückgegebenen Ereignisse.
"""
limit: Int
"""
Liste von Ereignis-IDs, um spezifische Ereignisse zu filtern.
"""
ids: [ID]
"""
Reihenfolge, in der die Ereignisse sortiert werden.
"""
order: EventRecordsOrder = createdAt_DESC
"""
Datenanbieter, um Ereignisse nach der Quelle zu filtern.
"""
dataProvider: String
"""
ID des Datenanbieters, um Ereignisse nach der Quelle zu filtern.
"""
dataProviderId: ID
"""
Maximale Anzahl der Ereignisse, die zurückgegeben werden sollen.
"""
take: Int
"""
Ort, um die Ereignisse nach Standort zu filtern.
"""
location: String

): [EventRecord]

"""
Gibt das generische Element mit der angegebenen ID zurück.
"""
genericItem(id: ID!): GenericItem!

genericItems(
"""
ID der Kategorie, um die generischen Elemente zu filtern.
"""
categoryId: ID
"""
Datenanbieter, um generische Elemente nach der Quelle zu filtern.
"""
dataProvider: String
"""
ID des Datenanbieters, um generische Elemente nach der Quelle zu filtern.
"""
dataProviderId: ID
"""
Externe ID, um spezifische generische Elemente zu filtern.
"""
externalId: ID
"""
Der generische Typ, um die Elemente zu filtern.
"""
genericType: String
"""
Liste von IDs, um spezifische generische Elemente zu filtern.
"""
ids: [ID]
"""
Maximale Anzahl der zurückgegebenen generischen Elemente.
"""
limit: Int
"""
Reihenfolge, in der die generischen Elemente sortiert werden.
"""
order: GenericItemOrder = createdAt_DESC
"""
Anzahl der übersprungenen generischen Elemente vor der Rückgabe.
"""
skip: Int
"""
Ort, um die generischen Elemente nach Standort zu filtern.
"""
location: String

): [GenericItem]

"""
Gibt das Mittagessen mit der angegebenen ID zurück.
"""
lunch(id: ID!): Lunch!

lunches(
"""
Datumsbereich, um die Mittagessen zu filtern.
"""
dateRange: [String]
"""
Maximale Anzahl der zurückgegebenen Mittagessen.
"""
limit: Int
"""
Anzahl der übersprungenen Mittagessen vor der Rückgabe.
"""
skip: Int
"""
Liste von IDs, um spezifische Mittagessen zu filtern.
"""
ids: [ID]
"""
Reihenfolge, in der die Mittagessen sortiert werden.
"""
order: LunchesOrder = createdAt_DESC

): [Lunch!]!

"""
Gibt den Nachrichtenartikel mit der angegebenen ID zurück.
"""
newsItem(id: ID!): NewsItem!

newsItems(
"""
Maximale Anzahl der zurückgegebenen Nachrichtenartikel.
"""
limit: Int
"""
Anzahl der übersprungenen Nachrichtenartikel vor der Rückgabe.
"""
skip: Int
"""
Liste von IDs, um spezifische Nachrichtenartikel zu filtern.
"""
ids: [ID]
"""
Reihenfolge, in der die Nachrichtenartikel sortiert werden.
"""
order: NewsItemsOrder = publishedAt_DESC
"""
Datenanbieter, um Nachrichtenartikel nach der Quelle zu filtern.
"""
dataProvider: String
"""
ID des Datenanbieters, um Nachrichtenartikel nach der Quelle zu filtern.
"""
dataProviderId: ID
"""
Liste der IDs von Datenanbietern, die von den Ergebnissen ausgeschlossen werden sollen.
"""
excludeDataProviderIds: [ID]
"""
ID der Kategorie, um Nachrichtenartikel zu filtern.
"""
categoryId: ID
"""
Liste von Kategorie-IDs, um Nachrichtenartikel zu filtern.
"""
categoryIds: [ID]

): [NewsItem]

newsItemsDataProviders(
"""
ID der Kategorie, um die Datenanbieter zu filtern.
"""
categoryId: ID
"""
Liste der Kategorie-IDs, um die Datenanbieter zu filtern.
"""
categoryIds: [ID!]

): [DataProvider!]!

"""
Gibt den Ort von Interesse mit der angegebenen ID zurück.
"""
pointOfInterest(id: ID!): PointOfInterest!

pointsOfInterest(
"""
Maximale Anzahl der zurückgegebenen Orte von Interesse.
"""
limit: Int
"""
Anzahl der übersprungenen Orte von Interesse vor der Rückgabe.
"""
skip: Int
"""
Liste von IDs, um spezifische Orte von Interesse zu filtern.
"""
ids: [ID]
"""
Reihenfolge, in der die Orte von Interesse sortiert werden.
"""
order: PointsOfInterestOrder = createdAt_DESC
"""
Datenanbieter, um Orte von Interesse nach der Quelle zu filtern.
"""
dataProvider: String
"""
ID des Datenanbieters, um Orte von Interesse nach der Quelle zu filtern.
"""
dataProviderId: ID
"""
Die Kategorie, um Orte von Interesse zu filtern.
"""
category: String
"""
ID der Kategorie, um Orte von Interesse zu filtern.
"""
categoryId: ID
"""
Liste von Kategorie-IDs, um Orte von Interesse zu filtern.
"""
categoryIds: [ID]
"""
Ort, um die Orte von Interesse nach Standort zu filtern.
"""
location: String

): [PointOfInterest]

publicHtmlFile(
"""
Name der öffentlichen HTML-Datei.
"""
name: String!
"""
Version der öffentlichen HTML-Datei.
"""
version: String

): PublicHtmlFile!

"""
Gibt eine Liste aller öffentlichen HTML-Dateien zurück.
"""
publicHtmlFiles: [PublicHtmlFile!]!

publicJsonFile(
"""
Name der öffentlichen JSON-Datei.
"""
name: String!
"""
Version der öffentlichen JSON-Datei.
"""
version: String

): PublicJsonFile!

"""
Gibt eine Liste von Kommentaren zu einer Umfrage zurück.
"""
surveyComments(surveyId: ID): [SurveyComment!]!

surveys(
"""
Liste von IDs, um spezifische Umfragen zu filtern.
"""
ids: [ID]
"""
Gibt an, ob nur laufende Umfragen zurückgegeben werden sollen.
"""
ongoing: Boolean
"""
Gibt an, ob nur archivierte Umfragen zurückgegeben werden sollen.
"""
archived: Boolean

): [SurveyPoll!]!

"""
Gibt die Tour mit der angegebenen ID zurück.
"""
tour(id: ID!): Tour!

tours(
"""
Maximale Anzahl der zurückgegebenen Touren.
"""
limit: Int
"""
Anzahl der übersprungenen Touren vor der Rückgabe.
"""
skip: Int
"""
Liste von IDs, um spezifische Touren zu filtern.
"""
ids: [ID]
"""
Reihenfolge, in der die Touren sortiert werden.
"""
order: ToursOrder = createdAt_DESC
"""
Datenanbieter, um Touren nach der Quelle zu filtern.
"""
dataProvider: String
"""
ID des Datenanbieters, um Touren nach der Quelle zu filtern.
"""
dataProviderId: ID
"""
Die Kategorie, um Touren zu filtern.
"""
category: String
"""
ID der Kategorie, um Touren zu filtern.
"""
categoryId: ID
"""
Liste von Kategorie-IDs, um Touren zu filtern.
"""
categoryIds: [ID]
"""
Ort, um die Touren nach Standort zu filtern.
"""
location: String

): [Tour!]!

wasteAddresses(
"""
Maximale Anzahl der zurückgegebenen Abfalladressen.
"""
limit: Int
"""
Anzahl der übersprungenen Abfalladressen vor der Rückgabe.
"""
skip: Int
"""
Liste von IDs, um spezifische Abfalladressen zu filtern.
"""
ids: [ID]
"""
Reihenfolge, in der die Abfalladressen sortiert werden.
"""
order: WasteLocationOrder = createdAt_DESC

): [Address!]!

"""
Gibt den Abfallort-Typ mit der angegebenen ID zurück.
"""
wasteLocationType(id: ID!): WasteLocationType!

"""
Gibt eine Liste der Abfallort-Typen zurück, die der angegebenen Tour zugeordnet sind.
"""
wasteLocationTypes(tourId: ID): [WasteLocationType!]!

"""
Gibt eine Liste der Abholzeiten für die angegebene Mülltour zurück.
"""
wasteTourDates(tourId: ID!): [WastePickUpTime!]!

"""
Gibt eine Liste der Mülltouren zurück.
"""
wasteTours: [WasteTour!]!

"""
Gibt die Wetterkarte mit der angegebenen ID zurück.
"""
weatherMap(id: ID): OpenWeatherMap!

weatherMaps(
"""
Maximale Anzahl der zurückgegebenen Wetterkarten.
"""
limit: Int
"""
Anzahl der übersprungenen Wetterkarten vor der Rückgabe.
"""
skip: Int
"""
Liste von IDs, um spezifische Wetterkarten zu filtern.
"""
ids: [ID]
"""
Reihenfolge, in der die Wetterkarten sortiert werden.
"""
order: OpenWeatherMapsOrder = createdAt_DESC
): [OpenWeatherMap]
}


type Region {
"""
Eindeutiger Bezeichner für die Region.
"""
id: ID
"""
Name der Region.
"""
name: String
}

input RegionInput {
"""
Name der Region als Eingabe.
"""
name: String
}

type RepeatDuration {
"""
Enddatum der Wiederholungsdauer.
"""
endDate: String
"""
Gibt an, ob die Wiederholung jährlich erfolgt.
"""
everyYear: Boolean
"""
Eindeutiger Bezeichner für die Wiederholungsdauer.
"""
id: ID
"""
Startdatum der Wiederholungsdauer.
"""
startDate: String
}

input RepeatDurationInput {
"""
Startdatum der Wiederholungsdauer als Eingabe.
"""
startDate: String
"""
Enddatum der Wiederholungsdauer als Eingabe.
"""
endDate: String
"""
Gibt an, ob die Wiederholung jährlich erfolgt als Eingabe.
"""
everyYear: Boolean
}

type Setting {
"""
Gibt an, ob der Datensatz bei jedem Import neu erstellt werden soll.
"""
alwaysRecreateOnImport: String
"""
Gibt an, ob nur die Zusammenfassung angezeigt werden soll.
"""
displayOnlySummary: String
"""
Text des Links, der nur die Zusammenfassung anzeigt.
"""
onlySummaryLinkText: String
}

type Status {
"""
Eindeutiger Bezeichner für den Status.
"""
id: ID
"""
Beschreibung des Status.
"""
status: String
"""
Statuscode des Ergebnisses.
"""
statusCode: Int
}

type SurveyComment {
"""
Zeitstempel, wann der Kommentar erstellt wurde.
"""
createdAt: String
"""
Eindeutiger Bezeichner für den Kommentar.
"""
id: ID
"""
Inhalt der Nachricht des Kommentars.
"""
message: String
"""
Eindeutiger Bezeichner der zugehörigen Umfrage.
"""
surveyPollId: ID
"""
Gibt an, ob der Kommentar sichtbar ist.
"""
visible: Boolean
}

type SurveyPoll {
"""
Gibt an, ob die Umfrage kommentiert werden kann.
"""
canComment: Boolean
"""
Zeitstempel, wann die Umfrage erstellt wurde.
"""
createdAt: String
"""
Datenanbieter, der die Umfrage bereitgestellt hat.
"""
dataProvider: DataProvider
"""
Datum der Umfrage.
"""
date: Date
"""
Mehrsprachige Beschreibung der Umfrage.
"""
description: I18nJSON
"""
Eindeutiger Bezeichner für die Umfrage.
"""
id: ID
"""
Gibt an, ob die Umfrage mehrsprachig ist.
"""
isMultilingual: Boolean
"""
Gibt an, ob mehrere Antworten auf die Frage erlaubt sind.
"""
questionAllowMultipleResponses: Boolean
"""
Eindeutiger Bezeichner der Frage der Umfrage.
"""
questionId: ID
"""
Mehrsprachiger Titel der Umfragefrage.
"""
questionTitle: I18nJSON
"""
Liste der Antwortoptionen für die Umfrage.
"""
responseOptions: [SurveyResponseOptions!]
"""
Liste der Kommentare, die zu dieser Umfrage abgegeben wurden.
"""
surveyComments: [SurveyComment!]
"""
Mehrsprachiger Titel der Umfrage.
"""
title: I18nJSON
"""
Zeitstempel, wann die Umfrage zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Gibt an, ob die Umfrage sichtbar ist.
"""
visible: Boolean
}

type SurveyResponseOptions {
"""
Zeitstempel, wann die Antwortoption erstellt wurde.
"""
createdAt: String
"""
Eindeutiger Bezeichner für die Antwortoption.
"""
id: ID
"""
Mehrsprachiger Titel der Antwortoption.
"""
title: I18nJSON
"""
Zeitstempel, wann die Antwortoption zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Anzahl der Stimmen, die die Antwortoption erhalten hat.
"""
votesCount: Int
}

type Tour {
"""
Gibt an, ob die Tour aktiv ist.
"""
active: Boolean
"""
Liste der Adressen, die mit der Tour verbunden sind.
"""
addresses: [Address!]
"""
Liste der Kategorien, zu denen die Tour gehört.
"""
categories: [Category!]
"""
Die Hauptkategorie, zu der die Tour gehört.
"""
category: Category
"""
Liste der Zertifikate, die der Tour zugeordnet sind.
"""
certificates: [Certificate!]
"""
Kontaktinformationen für die Tour.
"""
contact: Contact
"""
Zeitstempel, wann die Tour erstellt wurde.
"""
createdAt: String
"""
Datenanbieter, der die Tour bereitgestellt hat.
"""
dataProvider: DataProvider
"""
Beschreibung der Tour.
"""
description: String
"""
Geographische Daten der Tourstrecke.
"""
geometryTourData: [GeoLocation!]!
"""
Eindeutiger Bezeichner für die Tour.
"""
id: ID
"""
Die Länge der Tour in Kilometern.
"""
lengthKm: Int
"""
Standort der Tour.
"""
location: Location
"""
Das Transportmittel, das für die Tour verwendet wird.
"""
meansOfTransportation: String
"""
Liste der Medieninhalte, die mit der Tour verknüpft sind.
"""
mediaContents: [MediaContent!]
"""
Beschreibung der Tour für mobile Geräte.
"""
mobileDescription: String
"""
Name der Tour.
"""
name: String
"""
Betreibergesellschaft der Tour.
"""
operatingCompany: OperatingCompany
"""
Zusätzliche, unstrukturierte Daten, die mit der Tour verbunden sind.
"""
payload: JSON
"""
Liste der Regionen, die mit der Tour verbunden sind.
"""
regions: [Region!]
"""
Einstellungen, die mit der Tour verbunden sind.
"""
settings: Setting
"""
Liste der Tags, die mit der Tour verbunden sind.
"""
tags: String
"""
Liste der Stopps, die Teil der Tour sind.
"""
tourStops: [TourStop!]
"""
Zeitstempel, wann die Tour zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Gibt an, ob die Tour sichtbar ist.
"""
visible: Boolean
"""
Liste der URLs, die mit der Tour verbunden sind.
"""
webUrls: [WebUrl!]
}

type TourStop {
"""
Informationen zur Barrierefreiheit des Tourstopps.
"""
accessibilityInformation: AccessibilityInformation
"""
Gibt an, ob der Tourstopp aktiv ist.
"""
active: Boolean
"""
Liste der Adressen, die mit dem Tourstopp verbunden sind.
"""
addresses: [Address!]
"""
Liste der Kategorien, zu denen der Tourstopp gehört.
"""
categories: [Category!]
"""
Die Hauptkategorie, zu der der Tourstopp gehört.
"""
category: Category
"""
Liste der Zertifikate, die dem Tourstopp zugeordnet sind.
"""
certificates: [Certificate!]
"""
Kontaktinformationen für den Tourstopp.
"""
contact: Contact
"""
Zeitstempel, wann der Tourstopp erstellt wurde.
"""
createdAt: String
"""
Datenanbieter, der den Tourstopp bereitgestellt hat.
"""
dataProvider: DataProvider
"""
Beschreibung des Tourstopps.
"""
description: String
"""
Eindeutiger Bezeichner für den Tourstopp.
"""
id: ID
"""
Geographische Lage des Tourstopps.
"""
location: Location
"""
Liste der Medieninhalte, die mit dem Tourstopp verknüpft sind.
"""
mediaContents: [MediaContent!]
"""
Beschreibung des Tourstopps für mobile Geräte.
"""
mobileDescription: String
"""
Name des Tourstopps.
"""
name: String
"""
Betreibergesellschaft des Tourstopps.
"""
operatingCompany: OperatingCompany
"""
Zusätzliche, unstrukturierte Daten, die mit dem Tourstopp verbunden sind.
"""
payload: JSON
"""
Einstellungen, die mit dem Tourstopp verbunden sind.
"""
settings: Setting
"""
Liste der Tags, die dem Tourstopp zugeordnet sind.
"""
tagList: [String!]
"""
Zeitstempel, wann der Tourstopp zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Gibt an, ob der Tourstopp sichtbar ist.
"""
visible: Boolean
"""
Liste der URLs, die mit dem Tourstopp verbunden sind.
"""
webUrls: [WebUrl!]
}

input TourStopInput {
"""
Name des Tourstopps als Eingabe.
"""
name: String!
"""
Beschreibung des Tourstopps als Eingabe.
"""
description: String
"""
Beschreibung des Tourstopps für mobile Geräte als Eingabe.
"""
mobileDescription: String
"""
Gibt an, ob der Tourstopp aktiv ist.
"""
active: Boolean
"""
Name der Kategorie, zu der der Tourstopp gehört.
"""
categoryName: String
"""
Zusätzliche, unstrukturierte Daten, die mit dem Tourstopp verbunden sind.
"""
payload: JSON
"""
Liste der Kategorien, zu denen der Tourstopp gehört.
"""
categories: [CategoryInput!]
"""
Liste der Adressen, die mit dem Tourstopp verbunden sind.
"""
addresses: [AddressInput!]
"""
Kontaktinformationen für den Tourstopp.
"""
contact: ContactInput
"""
Betreibergesellschaft des Tourstopps.
"""
operatingCompany: OperatingCompanyInput
"""
Liste der URLs, die mit dem Tourstopp verbunden sind.
"""
webUrls: [WebUrlInput!]
"""
Liste der Medieninhalte, die mit dem Tourstopp verknüpft sind.
"""
mediaContents: [MediaContentInput!]
"""
Geographische Lage des Tourstopps als Eingabe.
"""
location: LocationInput
"""
Liste der Zertifikate, die dem Tourstopp zugeordnet sind.
"""
certificates: [CertificateInput!]
"""
Informationen zur Barrierefreiheit für den Tourstopp als Eingabe.
"""
accessibilityInformation: AccessibilityInformationInput
"""
Liste der Tags, die mit dem Tourstopp verbunden sind.
"""
tags: [String!]
}

enum ToursOrder {
"""
Sortierung nach dem Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach dem Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
"""
Sortierung nach dem Namen in absteigender Reihenfolge.
"""
name_DESC
"""
Sortierung nach dem Namen in aufsteigender Reihenfolge.
"""
name_ASC
"""
Zufällige Sortierung der Touren.
"""
RAND
}

type UpdateWasteTourDatesPayload {
"""
Eindeutiger Bezeichner für die aktualisierte Mülltour.
"""
id: ID!
}

enum WasteLocationOrder {
"""
Sortierung nach dem Erstellungsdatum in absteigender Reihenfolge.
"""
createdAt_DESC
"""
Sortierung nach dem Erstellungsdatum in aufsteigender Reihenfolge.
"""
createdAt_ASC
"""
Sortierung nach dem letzten Aktualisierungsdatum in absteigender Reihenfolge.
"""
updatedAt_DESC
"""
Sortierung nach dem letzten Aktualisierungsdatum in aufsteigender Reihenfolge.
"""
updatedAt_ASC
"""
Sortierung nach der ID in absteigender Reihenfolge.
"""
id_DESC
"""
Sortierung nach der ID in aufsteigender Reihenfolge.
"""
id_ASC
"""
Sortierung nach der Straße in absteigender Reihenfolge.
"""
street_DESC
"""
Sortierung nach der Straße in aufsteigender Reihenfolge.
"""
street_ASC
}

type WasteLocationType {
"""
Adresse des Müllsammelorts.
"""
address: Address
"""
Eindeutiger Bezeichner für die Adresse des Müllsammelorts.
"""
addressId: Int
"""
Zeitstempel, wann der Müllsammelort erstellt wurde.
"""
createdAt: String
"""
Eindeutiger Bezeichner für den Müllsammelort-Typ.
"""
id: ID
"""
Liste der Abholdaten für diesen Müllsammelort.
"""
listPickUpDates: [String!]
"""
Liste der Abholzeiten für diesen Müllsammelort.
"""
pickUpTimes: [WastePickUpTime!]
"""
Zeitstempel, wann der Müllsammelort zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Die Mülltour, zu der dieser Müllsammelort gehört.
"""
wasteTour: WasteTour
"""
Der Abfalltyp, der an diesem Ort gesammelt wird.
"""
wasteType: String
}

input WasteLocationTypeInput {
"""
Abfalltyp, der am Müllsammelort gesammelt wird, als Eingabe.
"""
wasteType: String
"""
Eindeutiger Bezeichner für die Adresse des Müllsammelorts als Eingabe.
"""
addressId: Int
"""
Adresse des Müllsammelorts als Eingabe.
"""
address: AddressInput
}

type WastePickUpTime {
"""
Zeitstempel, wann die Abholzeit erstellt wurde.
"""
createdAt: String
"""
Eindeutiger Bezeichner für die Abholzeit.
"""
id: ID
"""
Datum der Abholung.
"""
pickupDate: String
"""
Zeitstempel, wann die Abholzeit zuletzt aktualisiert wurde.
"""
updatedAt: String
"""
Der Müllsammelort, zu dem diese Abholzeit gehört.
"""
wasteLocationType: WasteLocationType
"""
Eindeutiger Bezeichner des Müllsammelorts für diese Abholzeit.
"""
wasteLocationTypeId: ID
}

type WasteTour {
"""
Eindeutiger Bezeichner für die Mülltour.
"""
id: ID
"""
Titel der Mülltour.
"""
title: String
"""
Der Abfalltyp, der während der Tour gesammelt wird.
"""
wasteType: String
}

type WebUrl {
"""
Beschreibung der Web-URL.
"""
description: String
"""
Eindeutiger Bezeichner für die Web-URL.
"""
id: ID
}


input WebUrlInput {
  """
Beschreibung der Web-URL.
"""
  url: String
  """
Beschreibung der Web-URL.
"""
  description: String
}
